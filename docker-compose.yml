version: '3.9'

services:
  api:
    container_name: api
    build:
      context: /api
      dockerfile: Dockerfile
    depends_on:
      auth: 
        condition: service_started
      handler: 
        condition: service_started

    env_file:
      - .env
    environment:
      PORT: 8060
    ports:  
      - "8060:8060"

  auth:
    container_name: auth
    build:
      context: /auth
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      PORT: 8070
    ports:  
      - "8070:8070"
    healthcheck:
      test: ["curl -f http://auth:8070/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  handler:
    container_name: handler
    build:
      context: /handler
      dockerfile: Dockerfile
    depends_on:
      handler_pq:
        condition: service_healthy
      parser: 
        condition: service_started
    env_file:
      - .env
    environment:
      PORT: 8060
    ports:  
      - "8060:8060"
    healthcheck:
      test: ["curl -f http://handler:8060/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
      
  parser:
    container_name: parser
    build:
      context: /parser
      dockerfile: Dockerfile
    environment:
      PORT: 8050
    ports:
      - "8050:8050"
    healthcheck:
      test: ["curl -f http://parser:8050/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  handler_pq:
    container_name: handler_pq
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: eldoseldos
      POSTGRES_DB: exchange_api
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d exchange_api"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: always

